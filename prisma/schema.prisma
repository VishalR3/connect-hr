// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "client/"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Employee {
  id               Int                       @id @default(autoincrement())
  name             String
  email            String                    @unique
  employeeId       String?
  position         String
  department       String
  joinDate         DateTime
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  isActive         Boolean                   @default(true)
  payrollRecords   PayrollRecord[]
  attendance       AttendanceRecord[]
  leaveRequests    LeaveRequest[]
  salaryStructures EmployeeSalaryStructure[]
}

model PayrollRecord {
  id          Int           @id @default(autoincrement())
  employeeId  Int
  employee    Employee      @relation(fields: [employeeId], references: [id])
  salary      Float
  bonus       Float?
  deductions  Float?
  status      PayrollStatus @default(pending)
  paymentDate DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model AttendanceRecord {
  id         Int              @id @default(autoincrement())
  employeeId Int
  employee   Employee         @relation(fields: [employeeId], references: [id])
  checkIn    DateTime
  checkOut   DateTime?
  status     AttendanceStatus @default(present)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model LeaveRequest {
  id         Int         @id @default(autoincrement())
  employeeId Int
  employee   Employee    @relation(fields: [employeeId], references: [id])
  startDate  DateTime
  endDate    DateTime
  type       LeaveType
  status     LeaveStatus @default(pending)
  reason     String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Settings {
  id                  Int      @id @default(1)
  companyName         String
  companyAddress      String
  companyContact      String
  companyTaxId        String
  payrollCurrency     String   @default("USD")
  payrollPayday       Int      @default(15)
  payrollOvertimeRate Float    @default(1.5)
  leaveAnnualDays     Int      @default(20)
  leaveSickDays       Int      @default(10)
  leaveCarryForward   Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Department {
  id                 Int    @id @default(autoincrement())
  name               String
  parentDepartmentId Int?

  parentDepartment Department @relation(fields: [parentDepartmentId], references: [id])
  teams            Team[]
}

model Team {
  id           Int    @id @default(autoincrement())
  name         String
  departmentId Int

  department Department @relation(fields: [departmentId], references: [id])
}

model SalaryStructure {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  components StructureComponent[]
}

model PayComponent {
  id              Int                         @id @default(autoincrement())
  name            String
  category        PayComponentCategory        @default(earning)
  calculationType PayComponentCalculationType @default(fixed)
  amount          Float
  formula         String?
  baseComponentId Int?
  isStatutory     Boolean                     @default(false)

  baseComponent PayComponent @relation(fields: [baseComponentId], references: [id])
}

model StructureComponent {
  id                Int     @id @default(autoincrement())
  salaryStructureId Int
  payComponentId    Int
  amountOverride    Float?
  formulaOverride   String?

  payComponent    PayComponent    @relation(fields: [payComponentId], references: [id])
  salaryStructure SalaryStructure @relation(fields: [salaryStructureId], references: [id])
}

model EmployeeSalaryStructure {
  id                Int      @id @default(autoincrement())
  employeeId        Int
  salaryStructureId Int
  isActive          Boolean  @default(true)
  effectiveFrom     DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  employee        Employee        @relation(fields: [employeeId], references: [id])
  salaryStructure SalaryStructure @relation(fields: [salaryStructureId], references: [id])
}

enum PayComponentCalculationType {
  fixed
  percentage
  formula
}

enum PayComponentCategory {
  earning
  deduction
  reimbursement
}

enum PayrollStatus {
  pending
  paid
  failed
}

enum AttendanceStatus {
  present
  absent
  late
  half_day
}

enum LeaveType {
  annual
  sick
  maternity
  paternity
  unpaid
  personal
}

enum LeaveStatus {
  pending
  approved
  rejected
  cancelled
}
